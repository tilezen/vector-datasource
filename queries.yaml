all:
  - water
  - earth
  - places
  - landuse
  - roads
  - buildings
  - pois
  - boundaries
  - transit
  - admin_areas

sources:

  # NOTE: each source represents a query to the database
  # within each source, a list of templates can be used
  # the templates will be combined with a sql `union all` in between
  # therefore, it's necessary that the query results of each template
  # have the same types

  # NOTE: end_zoom is exclusive

  planet_osm_polygon:
    - template: planet_osm_polygon.jinja2
      # landuse and pois start at 4
      start_zoom: 4
  planet_osm_line:
    - template: planet_osm_line.jinja2
      # transit starts at 5
      start_zoom: 5
  planet_osm_point:
    # earth and places start at zoom 0
    - template: planet_osm_point.jinja2

  ne:
    ## places
    # ne_10m_populated_places
    # Note: we add start_zoom 2 here otherwise for the zoom 0/0/0 tile at 512px (or zoom1 at 256px), the size will get a lot bigger because there are 11 features with min_zoom of 1.7 as of Jan 2022.
    - template: ne-places.jinja2
      start_zoom: 2

    ## boundaries

    # ne_110m_admin_0_boundary_lines_land
    - template: ne-boundaries-110m.jinja2
      end_zoom: 2

    # ne_50m_admin_0_boundary_lines_land
    # ne_50m_admin_1_states_provinces_lines
    - template: ne-boundaries-50m.jinja2
      start_zoom: 2
      end_zoom: 5

    # ne_10m_admin_0_boundary_lines_land
    # ne_10m_admin_0_boundary_lines_map_units
    # ne_10m_admin_1_states_provinces_lines
    - template: ne-boundaries-10m.jinja2
      start_zoom: 5
      end_zoom: 8

    ## earth

    # ne_110m_land
    - template: ne-earth-110m.jinja2
      end_zoom: 2

    # ne_50m_land
    - template: ne-earth-50m.jinja2
      start_zoom: 2
      end_zoom: 5

    # ne_10m_land
    - template: ne-earth-10m.jinja2
      start_zoom: 5
      end_zoom: 8

    ## landuse

    # ne_50m_urban_areas
    - template: ne-landuse-50m.jinja2
      start_zoom: 4
      end_zoom: 6

    # ne_10m_urban_areas
    - template: ne-landuse-10m.jinja2
      start_zoom: 6
      end_zoom: 10

    ## roads

    # ne_10m_roads
    - template: ne-roads.jinja2
      start_zoom: 5
      end_zoom: 8

    ## water

    # ne_110m_ocean
    # ne_110m_lakes
    # ne_110m_coastline
    # ne_110m_lakes
    - template: ne-water-110m.jinja2
      end_zoom: 2

    # ne_50m_ocean
    # ne_50m_lakes
    # ne_50m_coastline
    # ne_50m_lakes
    - template: ne-water-50m.jinja2
      start_zoom: 2
      end_zoom: 5

    # ne_10m_ocean
    # ne_10m_lakes
    # ne_10m_coastline
    # ne_10m_lakes
    - template: ne-water-10m.jinja2
      start_zoom: 5
      end_zoom: 8

    # ne_50m_playas
    - template: ne-water-playas-50m.jinja2
      start_zoom: 4
      end_zoom: 5

    # ne_10m_playas
    - template: ne-water-playas-10m.jinja2
      start_zoom: 5
      end_zoom: 8

  osmdata:

    - template: osmdata-earth.jinja2
      start_zoom: 8

    - template: osmdata-water.jinja2
      start_zoom: 8

  wof:
    - template: wof.jinja2
      start_zoom: 11

  admin_areas:
    - template: admin_areas.jinja2
      # starts at the min zoom where we have road layer data
      start_zoom: 5

  # note: this goes into the _boundaries_ layer.
  buffered_land:
    - template: buffered_land.jinja2
      start_zoom: 8

layers:
  water:
    geometry_types: [Point, MultiPoint, Polygon, MultiPolygon, LineString, MultiLineString]
    simplify_before_intersect: true
    simplify_start: 0
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.parse_layer_as_float
      - vectordatasource.transform.water_tunnel
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.water
    area-inclusion-threshold: 1
  earth:
    geometry_types: [Point, MultiPoint, Polygon, MultiPolygon, LineString, MultiLineString]
    simplify_before_intersect: true
    simplify_start: 0
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.earth
    area-inclusion-threshold: 1
  places:
    geometry_types: [Point, MultiPoint]
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.place_population_int
      - vectordatasource.transform.population_rank
      - vectordatasource.transform.capital_alternate_viewpoint
      - vectordatasource.transform.calculate_default_place_min_zoom
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.places
    area-inclusion-threshold: 1
  landuse:
    geometry_types: [Polygon, MultiPolygon, LineString, MultiLineString]
    simplify_start: 4
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.normalize_tourism_kind
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.normalize_operator_values
      - vectordatasource.transform.major_airport_detector
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.landuse
    area-inclusion-threshold: 1
  roads:
    geometry_types: [LineString, MultiLineString]
    simplify_start: 4
    tolerance: 1.0
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.parse_layer_as_float
      - vectordatasource.transform.road_classifier
      - vectordatasource.transform.road_oneway
      - vectordatasource.transform.road_abbreviate_name
      - vectordatasource.transform.route_name
      - vectordatasource.transform.normalize_aerialways
      - vectordatasource.transform.normalize_cycleway
      - vectordatasource.transform.add_is_bicycle_related
      - vectordatasource.transform.add_road_network_from_ncat
      - vectordatasource.transform.add_vehicle_restrictions
      - vectordatasource.transform.road_trim_properties
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.roads
    area-inclusion-threshold: 1
  buildings:
    simplify_before_intersect: yes
    area_threshold: 0.0
    tolerance: 1.0
    clip_factor: 3.0
    geometry_types: [Point, MultiPoint, Polygon, MultiPolygon]
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.parse_layer_as_float
      - vectordatasource.transform.building_height
      - vectordatasource.transform.building_min_height
      - vectordatasource.transform.synthesize_volume
      - vectordatasource.transform.normalize_tourism_kind
      - vectordatasource.transform.building_trim_properties
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.buildings
    area-inclusion-threshold: 1
  pois:
    geometry_types: [Point, MultiPoint, Polygon, MultiPolygon]
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.add_iata_code_to_airports
      - vectordatasource.transform.normalize_tourism_kind
      - vectordatasource.transform.normalize_social_kind
      - vectordatasource.transform.normalize_medical_kind
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.add_uic_ref
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.remove_zero_area
      - vectordatasource.transform.make_representative_point
      - vectordatasource.transform.height_to_meters
      - vectordatasource.transform.pois_capacity_int
      - vectordatasource.transform.pois_direction_int
      - vectordatasource.transform.major_airport_detector
      - vectordatasource.transform.elevation_to_meters
      - vectordatasource.transform.normalize_operator_values
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.pois
    area-inclusion-threshold: 1
  boundaries:
    geometry_types: [Polygon, MultiPolygon, LineString, MultiLineString]
    simplify_before_intersect: true
    simplify_start: 0
    tolerance: 1.0
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.admin_level_as_int
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.truncate_min_zoom_to_1dp
      - vectordatasource.transform.remap_viewpoint_kinds
      - vectordatasource.transform.unpack_viewpoint_claims
    area-inclusion-threshold: 1
  transit:
    geometry_types: [LineString, MultiLineString, Polygon, MultiPolygon]
    simplify_start: 5
    tolerance: 1.0
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.tags_name_i18n
      - vectordatasource.transform.add_uic_ref
      - vectordatasource.transform.tags_remove
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.detect_osm_relation
      - vectordatasource.transform.route_name
      - vectordatasource.transform.parse_layer_as_float
      - vectordatasource.transform.remove_feature_id
      - vectordatasource.transform.truncate_min_zoom_to_1dp
    sort: vectordatasource.sort.transit
    area-inclusion-threshold: 1
  admin_areas:
    geometry_types: [Polygon, MultiPolygon]
    # note: simplify_* settings shouldn't affect this layer, as it should be
    # dropped before we get to that stage. but worth "documenting" that it
    # shouldn't be simplified here to make it more explicit.
    simplify_before_intersect: false
    simplify_start: 999
    transform:
      - vectordatasource.transform.tags_create_dict
      - vectordatasource.transform.add_id_to_properties
      - vectordatasource.transform.remove_feature_id
    area-inclusion-threshold: 1
post_process:
  - fn: vectordatasource.transform.build_fence
    params:
      base_layer: landuse
      start_zoom: 16
      prop_transform:
        kind: true
        id: true
        source: true
        area: true
        min_zoom: true
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: landuse
      start_zoom: 4
      properties: [barrier]

  # coarsen the landuse kinds at mid & low zooms to help improve merging.
  #
  # do this _early_; before we assign sort_rank and to avoid inconsistency when
  # we join (e.g: roads) onto landuse and wouldn't want the road landuse_kind to
  # be different from the polygon in case that makes it the wrong colour.
  #
  # **NOTE** WE'RE CHANGING THE KINDS HERE!
  - fn: vectordatasource.transform.remap
    params:
      layer: landuse
      start_zoom: 0
      end_zoom: 13
      property: kind
      # don't want to apply this to linear features such as dams?
      where: >-
        geom_type in ('Polygon', 'MultiPolygon')
      # note that we don't need to remap things to themselves, e.g:
      # kind=desert stays as-is.
      remap:
        # aerodrome
        airfield: aerodrome

        # barren
        dam: barren
        land: barren
        quarry: barren
        rock: barren
        scree: barren
        shingle: barren
        stone: barren

        # desert
        bare_rock: desert
        sand: desert

        # farmland
        farm: farmland
        orchard: farmland
        plant_nursery: farmland
        vineyard: farmland

        # forest
        natural_wood: forest
        wood: forest

        # grassland
        common: grassland
        grass: grassland
        heath: grassland
        meadow: grassland
        scrub: grassland

        # military
        danger_area: military
        range: military

        # university
        college: university

        # urban_area
        allotments: urban_area
        artwork: urban_area
        attraction: urban_area
        commercial: urban_area
        fort: urban_area
        generator: urban_area
        industrial: urban_area
        pitch: urban_area
        place_of_worship: urban_area
        plant: urban_area
        prison: urban_area
        railway: urban_area
        residential: urban_area
        retail: urban_area
        village_green: urban_area
        wastewater_plant: urban_area
        water_works: urban_area
        works: urban_area

        # wetland
        mud: wetland

  # sort key
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/landuse.csv
    params:
      source_layer: landuse
      target_value_type: int
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/roads.csv
    params:
      source_layer: roads
      target_value_type: int
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/earth.csv
    params:
      source_layer: earth
      target_value_type: int
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/boundaries.csv
    params:
      source_layer: boundaries
      target_value_type: int
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/buildings.csv
    params:
      source_layer: buildings
      target_value_type: int
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/transit.csv
    params:
      source_layer: transit
      target_value_type: int
  # this needs to run before the water sort_rank csv matcher
  - fn: vectordatasource.transform.exterior_boundaries
    params:
      base_layer: water
      start_zoom: 8
      prop_transform:
        kind: true
        id: true
        source: true
        boundary: [true]
        area: true
        intermittent: true
      snap_tolerance: 0.125

  # the NE water queries pull in the full set of object properties for boundary
  # lines, which we don't want. strip them off here.
  - fn: vectordatasource.transform.drop_names
    params:
      source_layer: water
      start_zoom: 0
      end_zoom: 8
      geom_types: [LineString, MultiLineString]
      where: >-
        kind == 'lake' and boundary
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: water
      start_zoom: 0
      end_zoom: 8
      properties: [mz_label_placement]
      where: >-
        kind == 'lake' and boundary

  # have to do the water properties matching _after_ exterior boundaries
  # as it depends on having the "boundary: yes" property available.
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/sort_rank/water.csv
    params:
      source_layer: water
      target_value_type: int

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      properties: [layer]

  # cut with admin_areas to put country_code attributes on roads
  # which are mostly within a particular country.
  - fn: vectordatasource.transform.overlap
    params:
      base_layer: roads
      cutting_layer: admin_areas
      attribute: iso_code
      target_attribute: country_code
      linear: true

  - fn: vectordatasource.transform.road_networks
    params:
      layer: roads

  # having calculated the country_code on roads, now drop it. we don't want it
  # in the output (and it's already part of the `network`, if any got added to
  # the feature.)
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      properties: [country_code]

  - fn: vectordatasource.transform.point_in_country_logic
    params:
      layer: pois
      country_layer: admin_areas
      country_code_attr: iso_code
      output_attr: drives_on_left
      where: kind == 'mini_roundabout'
      # see https://en.wikipedia.org/wiki/List_of_countries_with_left-hand_traffic
      logic_table:
        AG: true # Antigua and Barbuda
        AI: true # Anguilla
        AU: true # Australia
        BB: true # Barbados
        BD: true # Bangladesh
        BM: true # Bermuda
        BN: true # Brunei
        BS: true # Bahamas
        BT: true # Bhutan
        BW: true # Botswana
        CC: true # Cocos (Keeling) Islands
        CK: true # Cook Islands
        CX: true # Christmas Island
        CY: true # Cyprus (note, also fake ISO code for Northern Cyprus)
        DM: true # Dominica
        FJ: true # Fiji
        FK: true # Falkland Islands
        GB: true # United Kingdom
        GD: true # Grenada
        GG: true # Guernsey
        GS: true # South Georgia and the South Sandwich Islands
        GY: true # Guyana
        HK: true # Hong Kong
        ID: true # Indonesia
        IE: true # Ireland
        IM: true # Isle of Man
        IN: true # India
        JE: true # Jersey
        JM: true # Jamaica
        JP: true # Japan
        KE: true # Kenya
        KI: true # Kiribati
        KN: true # Saint Kitts and Nevis
        KY: true # Cayman Islands
        LC: true # Saint Lucia
        LK: true # Sri Lanka
        LS: true # Lesotho
        MO: true # Macau (fake ISO code)
        MS: true # Montserrat
        MT: true # Malta
        MU: true # Mauritius
        MV: true # Maldives
        MW: true # Malawi
        MY: true # Malaysia
        MZ: true # Mozambique
        NA: true # Namibia
        NF: true # Norfolk Island
        NP: true # Nepal
        NR: true # Nauru
        NU: true # Niue
        NZ: true # New Zealand
        PG: true # Papua New Guinea
        PK: true # Pakistan
        PN: true # Pitcairn Islands
        SB: true # Solomon Islands
        SC: true # Seychelles
        SG: true # Singapore
        SH: true # Saint Helena, Ascension and Tristan da Cunha
        SR: true # Suriname
        SZ: true # Swaziland
        TC: true # Turks and Caicos Islands
        TH: true # Thailand
        TK: true # Tokelau
        TL: true # East Timor
        TO: true # Tonga
        TT: true # Trinidad and Tobago
        TV: true # Tuvalu
        TZ: true # Tanzania
        UG: true # Uganda
        VC: true # Saint Vincent and the Grenadines
        VG: true # British Virgin Islands
        VI: true # U.S. Virgin Islands
        WS: true # Samoa
        ZA: true # South Africa
        ZM: true # Zambia
        ZW: true # Zimbabwe

  # cut places with admin_areas to put country_code attributes on country,
  # state and province points. this is used to backfill information such as
  # min and max zoom based on country defaults.
  - fn: vectordatasource.transform.point_in_country_logic
    resources:
      logic_table:
        type: file
        init_fn: vectordatasource.transform.YAMLToDict
        path: spreadsheets/min_zoom/country.yaml
    params:
      layer: places
      country_layer: admin_areas
      country_code_attr: iso_code
      output_attrs:
        - min_zoom
        - max_zoom
      where: kind == 'country'

  - fn: vectordatasource.transform.point_in_country_logic
    resources:
      logic_table:
        type: file
        init_fn: vectordatasource.transform.YAMLToDict
        path: spreadsheets/min_zoom/state_province.yaml
    params:
      layer: places
      country_layer: admin_areas
      country_code_attr: iso_code
      output_attrs:
        - min_zoom
        - max_zoom
      where: kind == 'region'

  # IMPORTANT! do this _after_ the YAMLToDict default stuff, otherwise the
  # default will overwrite the value from Natural Earth.
  - fn: vectordatasource.transform.tags_set_ne_min_max_zoom
    params:
      layer: places

  - fn: vectordatasource.transform.tags_set_ne_pop_min_max_default
    params:
      layer: places

  # after we have the NE min zoom, drop features which we won't be displaying
  # at this zoom.
  - fn: vectordatasource.transform.min_zoom_filter
    params:
      layers: [places]

  - fn: vectordatasource.transform.overlap
    params:
      base_layer: buildings
      cutting_layer: landuse
      attribute: kind
      target_attribute: landuse_kind
      cutting_attrs: { sort_key: 'sort_rank', reverse: True }


  # turn admin polygons (countries, regions, etc...) into oriented boundaries with left/right names.
  - fn: vectordatasource.transform.admin_boundaries
    params:
      base_layer: boundaries
      start_zoom: 8

  # TODO: document OSM disputed boundary clipping procedure
  - fn: vectordatasource.transform.apply_disputed_boundary_viewpoints
    params:
      base_layer: boundaries
      start_zoom: 8

  # drop the claimed_by, disputed_by (and any left/right versions) on any
  # borders. these should have been projected into kind:xx viewpoints in the
  # previous step.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: boundaries
      start_zoom: 8
      properties:
        - claimed_by
        - "claimed_by:left"
        - "claimed_by:right"
        - disputed_by
        - "disputed_by:left"
        - "disputed_by:right"

  # drop id/id:left/id:right on boundaries up to zoom 13 inclusive.
  # the left/right IDs tend to be unique as a pair, and so prevent merging.
  # the id itself will be dropped by merging if it's possible to merge, and
  # at mid and low zooms is of dubious usefulness.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: boundaries
      start_zoom: 0
      end_zoom: 14
      properties:
        - id
        - "id:left"
        - "id:right"

  # drop any name on locality boundaries at zooms 11 and 13 (min two zooms).
  #
  # NOTE: the start_zoom of 10 here comes in because this is the first zoom
  # at which we show county boundaries. if that changes (in boundaries.yaml)
  # then it needs to change here, and vice-versa!
  - fn: vectordatasource.transform.drop_names
    params:
      source_layer: boundaries
      start_zoom: 10
      end_zoom: 14
      where: >-
        kind == 'county' or
        kind == 'locality'

  # try to merge boundaries into as long segments as possible.
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: boundaries
      start_zoom: 8
      end_zoom: 15

  # drop labels on boundaries which are too short to render.
  - fn: vectordatasource.transform.drop_names_on_short_boundaries
    params:
      source_layer: boundaries
      start_zoom: 8
      end_zoom: 15
      # pixels (256px nominal) to require per letter in the name. if lines are shorter than this,
      # the name gets dropped. name pairs (e.g: :left and :right) get dropped if either are longer
      # than pixels_per_letter. larger values mean fewer lines are eligible for labelling.
      pixels_per_letter: 11

  # drop names on boundary lines (country, region, macroregion) except zoom 7 from Natural Earth
  - fn: vectordatasource.transform.drop_names
    params:
      source_layer: boundaries
      start_zoom: 0
      end_zoom: 7

  # after dropping names, try again to merge boundaries into as few features as
  # possible (to reduce tile size).
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: boundaries
      start_zoom: 0
      end_zoom: 15

  # no lake labels at zoom 0-3:
  # https://github.com/tilezen/vector-datasource/issues/1730
  - fn: vectordatasource.transform.drop_names
    params:
      source_layer: water
      start_zoom: 0
      end_zoom: 4
      geom_types: [Polygon, MultiPolygon]
      where: >-
        kind == 'lake'

  # remove names per kind for a given zoom
  # before generating any label placements
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: water
      start_zoom: 0
      end_zoom: 16
      # short-hand for "name" property in the list below means all name-like
      # properties.
      all_name_variants: true
      properties:
        - name
        - old_name
      # TODO the properties.get('is_tunnel') is True might not work, need to fix it; refer to a similar fix in https://github.com/tilezen/vector-datasource/pull/2047
      where: >-
        (kind == 'sea' and zoom < 4) or
        (kind == 'bay' and zoom < 5) or
        (kind == 'fjord' and zoom < 5) or
        (kind == 'strait' and zoom < 5) or
        (kind == 'lake' and zoom < 5) or
        (kind_detail == 'lake' and zoom < 5) or
        (kind == 'playa' and zoom < 6) or
        (kind == 'reef' and zoom < 6) or
        (kind == 'river' and zoom <  12) or
        (kind_detail == 'river' and zoom <  12) or
        (kind == 'riverbank' and zoom <  12) or
        (kind == 'water' and kind_detail is None and zoom <  12) or
        (kind == 'canal' and zoom <  13) or
        (kind_detail == 'canal' and zoom <  13) or
        (kind == 'basin' and zoom <  13) or
        (kind_detail == 'basin' and zoom <  13) or
        (kind == 'dock' and zoom <  13) or
        (kind == 'dam' and zoom <  14) or
        (kind == 'stream' and zoom <  14) or
        (kind_detail == 'stream' and zoom <  14) or
        (kind == 'ditch' and zoom <  15) or
        (kind_detail == 'ditch' and zoom <  15) or
        (kind == 'drain' and zoom <  15) or
        (kind_detail == 'drain' and zoom <  15) or
        (kind == 'swimming_pool' and zoom <  15) or
        (kind == 'fountain' and zoom <  15) or
        (properties is not None and properties.get('is_tunnel') is True)

  - fn: vectordatasource.transform.handle_label_placement
    params:
      layers:
        - water
        - earth
      location_property: mz_label_placement
      label_property_name: label_placement
      label_property_value: true
      label_where: >-
        'name' in properties

  # some water polygon features are too small to need a label - and if we label
  # them then the label is often so prominent that it hides the polygon it's
  # for! see the images here for examples of this:
  # https://github.com/tilezen/vector-datasource/issues/1477#issuecomment-447162484
  #
  # we want to reset min_zoom on these features and screen them out if they
  # don't meet minimum sizes per zoom.
  - fn: vectordatasource.transform.update_min_zoom
    params:
      source_layer: water
      start_zoom: 4
      end_zoom: 16
      # the inclusion of "None" in the list might seem odd, but None compares
      # numerically smaller than any integer, so acts as a default for this
      # table.
      min_zoom: >-
        [min_zoom for min_zoom, area_threshold in [
            (1, 1000000000000),
            (2,  500000000000),
            (3,  250000000000),
            (4,  120000000000),
            (5,   80000000000),
            (6,   40000000000),
            (7,   10000000000),
            (8,     500000000),
            (9,     200000000),
            (10,     40000000),
            (11,      8000000),
            (12,      1000000),
            (13,       500000),
            (14,        50000),
            (15,        10000),
            (16,         None),
        ] if area >= area_threshold][0]
      # note the following line cannot be written as
      # properties is not None and properties.get('label_placement') is True
      where: >-
        properties is not None and label_placement

  # now that we have the label points
  # drop most water properties at lower zooms
  # this is for lines and polygons
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: water
      start_zoom: 0
      end_zoom: 15
      geom_types: [LineString, MultiLineString, Polygon, MultiPolygon]
      properties:
        - id
        - area
        - boundary
        - layer
        - wikidata_id
        - osm_relation
        - kind_tile_rank

  # now that we have the label points
  # drop water names at lower zooms for polys only
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: water
      start_zoom: 0
      end_zoom: 15
      geom_types: [Polygon, MultiPolygon]
      # short-hand for "name" property in the list below means all name-like
      # properties.
      all_name_variants: true
      properties:
        - name
        - old_name

  - fn: vectordatasource.transform.handle_label_placement
    params:
      layers:
        - landuse
      start_zoom: 15
      location_property: mz_label_placement
      label_property_name: label_placement
      label_property_value: true
      label_where: >-
        'name' in properties or
        ('sport' in properties and properties.get('kind', 'rock') not in ('rock', 'stone'))

  # drop any polygon features with mz_drop_polygon
  - fn: vectordatasource.transform.drop_features_where
    params:
      source_layer: landuse
      where: >-
        properties.get('mz_drop_polygon', False) and
        geom_type in ('Polygon', 'MultiPolygon')

  # drop mz_label placement at zooms we don't apply handle_label_placement
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: landuse
      start_zoom: 0
      end_zoom: 15
      properties: [mz_label_placement]
      geom_types: [Polygon, MultiPolygon]

  - fn: vectordatasource.transform.handle_label_placement
    params:
      layers:
        - buildings
      start_zoom: 16
      location_property: mz_label_placement
      label_property_name: label_placement
      label_property_value: true
      label_where: >-
        'name' in properties

  # drop mz_label placement at zooms we don't apply handle_label_placement
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: buildings
      start_zoom: 0
      end_zoom: 16
      properties: [mz_label_placement]
      geom_types: [Polygon, MultiPolygon]

  - fn: vectordatasource.transform.remove_duplicate_features
    params:
      source_layer: landuse
      end_zoom: 16
      property_keys: [name, kind]
      geometry_types: [Point]
      min_distance: 256.0

  # drop the names and less important additional tags of small landuse polygons
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: landuse
      start_zoom: 4
      end_zoom: 13
      properties: [name, sport, religion, surface]
      where: >-
        pixel_area > area
      geom_types: [Polygon, MultiPolygon]

  - fn: vectordatasource.transform.drop_features_where
    params:
      source_layer: water
      start_zoom: 3
      where: >-
        'label_placement' not in properties and kind in ('sea', 'bay', 'strait', 'fjord')
  - fn: vectordatasource.transform.drop_features_where
    params:
      source_layer: earth
      start_zoom: 0
      where: >-
        'label_placement' not in properties and kind in
        ('archipelago', 'island', 'islet', 'continent', 'valley', 'ridge')

  # merge water and earth polygons, see https://github.com/tilezen/vector-datasource/issues/1106
  - fn: vectordatasource.transform.merge_polygon_features
    params:
      source_layer: earth
  - fn: vectordatasource.transform.merge_polygon_features
    params:
      source_layer: water

  # merge line water polygons
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: water
      start_zoom: 8
      end_zoom: 15

  - fn: vectordatasource.transform.generate_address_points
    params:
      source_layer: buildings
      start_zoom: 16
  - fn: vectordatasource.transform.remove_duplicate_features
    params:
      source_layer: buildings
      end_zoom: 16
      property_keys: [name, kind]
      geometry_types: [Point]
      min_distance: 256.0
  - fn: vectordatasource.transform.remove_duplicate_features
    params:
      source_layer: pois
      end_zoom: 16
      property_keys: [name, kind]
      geometry_types: [Point]
      min_distance: 256.0
  - fn: vectordatasource.transform.drop_features_where
    params:
      source_layer: landuse
      start_zoom: 6
      where: >-
        properties.get('mz_is_building') is True and
        properties.get('label_placement') is None
  - fn: vectordatasource.transform.merge_duplicate_stations
    params:
      source_layer: pois
      end_zoom: 16
  - fn: vectordatasource.transform.normalize_station_properties
    params:
      source_layer: pois
  - fn: vectordatasource.transform.rank_features
    params:
      source_layer: pois
      items_matching:
        kind: station
      rank_key: kind_tile_rank
  - fn: vectordatasource.transform.keep_n_features_gridded
    params:
      source_layer: places
      start_zoom: 8
      end_zoom: 9
      items_matching: { kind: locality }
      max_items: 1
      grid_width_meters: 52181.0113
      sorting_keys:
        - { sort_key: 'min_zoom', reverse: False }
        - { sort_key: 'collision_rank', reverse: False }
        - { sort_key: 'population', reverse: True }
        - { sort_key: 'id', reverse: True }
  - fn: vectordatasource.transform.keep_n_features_gridded
    params:
      source_layer: places
      start_zoom: 9
      end_zoom: 10
      items_matching: { kind: locality }
      max_items: 1
      grid_width_meters: 26090.5056
      sorting_keys:
        - { sort_key: 'min_zoom', reverse: False }
        - { sort_key: 'collision_rank', reverse: False }
        - { sort_key: 'population', reverse: True }
        - { sort_key: 'id', reverse: True }
  - fn: vectordatasource.transform.keep_n_features_gridded
    params:
      source_layer: places
      start_zoom: 10
      end_zoom: 11
      items_matching: { kind: locality }
      max_items: 1
      grid_width_meters: 13045.2528
      sorting_keys:
        - { sort_key: 'min_zoom', reverse: False }
        - { sort_key: 'collision_rank', reverse: False }
        - { sort_key: 'population', reverse: True }
        - { sort_key: 'id', reverse: True }
  - fn: vectordatasource.transform.keep_n_features_gridded
    params:
      source_layer: places
      start_zoom: 11
      end_zoom: 12
      items_matching: { kind: locality }
      max_items: 1
      grid_width_meters: 6522.1264
      sorting_keys:
        - { sort_key: 'min_zoom', reverse: False }
        - { sort_key: 'collision_rank', reverse: False }
        - { sort_key: 'population', reverse: True }
        - { sort_key: 'id', reverse: True }
  - fn: vectordatasource.transform.keep_n_features_gridded
    params:
      source_layer: places
      start_zoom: 12
      end_zoom: 13
      items_matching: { kind: locality }
      max_items: 1
      grid_width_meters: 3261.0632
      sorting_keys:
        - { sort_key: 'min_zoom', reverse: False }
        - { sort_key: 'collision_rank', reverse: False }
        - { sort_key: 'population', reverse: True }
        - { sort_key: 'id', reverse: True }
  - fn: vectordatasource.transform.rank_features
    params:
      source_layer: places
      items_matching:
        kind: [neighbourhood, microhood, macrohood]
      rank_key: kind_tile_rank
      start_zoom: 11
  - fn: vectordatasource.transform.rank_features
    params:
      source_layer: pois
      items_matching:
        kind: [peak, volcano]
      rank_key: kind_tile_rank
      start_zoom: 9
  - fn: vectordatasource.transform.rank_features
    params:
      source_layer: water
      items_matching:
        kind: [bay, strait, fjord]
        label_placement: True
      rank_key: kind_tile_rank
      start_zoom: 8
  - fn: vectordatasource.transform.remove_duplicate_features
    params:
      source_layers: [pois, landuse, buildings]
      end_zoom: 16
      property_keys: [name]
      geometry_types: [Point]
      min_distance: 64.0
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties: [is_bridge, is_tunnel]
      where: >-
        (kind == 'path' and zoom < 15) or
        (kind in ['minor_road', 'major_road', 'highway', 'rail'] and zoom < 13)
  # drop certain road properties at lower zooms
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 13
      properties:
        - bicycle
        - colour
        - foot
        - horse
        - motor_vehicle
        - operator
        - route          # NVK (2017425): this is a suspicious tag
        - route_name     # NVK (2017425): this is a suspicious tag
        - sac_scale
        - state
        - symbol
        - tracktype
        - type           # NVK (2017425): this is a suspicious tag

  # drop certain road properties at lower zooms
  # drop all_bicycle_* until the max zoom:
  # https://github.com/tilezen/vector-datasource/pull/1707#discussion_r236522176
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 16
      properties:
        - all_walking_networks
        - all_walking_shield_texts
        - all_bicycle_networks
        - all_bicycle_shield_texts
        - all_bus_networks
        - all_bus_shield_texts

  # drop certain road properties at lower zooms
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - ascent
        - crossing
        - descent
        - description
        - distance
        - incline
        - oneway
        - oneway_bicycle
        - ramp
        - ramp_bicycle
        - roundtrip
        - segregated
        - sidewalk
        - sidewalk_left
        - sidewalk_right
        - sport
        - trail_visibility

  # drop name and other properties on early paths to
  # allow more line merging (use walking network for labeling)
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 13
      # this means remove all the names if "name" is one of the properties
      # we're dropping. in other words, allows us to use "name" as a short-
      # hand for name:XX, official_name, old_name, etc... without having to
      # spell all of them out at length.
      all_name_variants: true
      properties:
        - name
        - ref
      where: >-
        kind == 'path'

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - bus_network
        - walking_network
        - bicycle_network
      where: >-
        (kind == 'highway' and zoom < 13) or
        (kind == 'major_road' and zoom < 14) or
        (kind == 'minor_road' and zoom < 15)

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - bus_shield_text
        - bus_shield_text_length
        - bicycle_shield_text
        - bicycle_shield_text_length
        - walking_shield_text
        - walking_shield_text_length
        - hgv_restriction_shield_text
        - hgv_restriction_shield_text_length
      where: >-
        (kind == 'highway' and zoom < 12) or
        (kind == 'major_road' and zoom < 13) or
        (kind == 'minor_road' and zoom < 15)

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - network
        - shield_text
        - shield_text_length
      where: >-
        (kind_detail == 'motorway' and zoom <  7) or
        (kind_detail == 'trunk' and zoom <  9) or
        (kind_detail == 'primary' and zoom <  11) or
        (kind_detail == 'secondary' and zoom <  12) or
        (kind_detail == 'tertiary' and zoom <  13) or
        (kind_detail == 'motorway_link' and zoom <  13) or
        (kind_detail == 'trunk_link' and zoom <  13) or
        (kind_detail == 'primary_link' and zoom <  14) or
        (kind_detail == 'secondary_link' and zoom <  14) or
        (kind_detail == 'tertiary_link' and zoom <  14) or
        (kind == 'minor_road' and zoom < 15) or
        (kind == 'path' and zoom < 14) or
        (kind == 'ferry' and zoom < 14) or
        (kind == 'rail' and zoom < 15)

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      # short-hand for "name" property in the list below means all name-like
      # properties.
      all_name_variants: true
      properties:
        - name
        - ref
        - all_networks
        - all_shield_texts
        - service
        - access
        - osm_relation
      where: >-
        (kind == 'highway' and zoom <  11) or
        (kind_detail == 'trunk' and zoom <  12) or
        (kind_detail == 'primary' and zoom <  13) or
        (kind_detail == 'secondary' and zoom <  14) or
        (kind_detail == 'tertiary' and zoom <  14) or
        (kind_detail == 'motorway_link' and zoom <  14) or
        (kind_detail == 'trunk_link' and zoom <  14) or
        (kind_detail == 'primary_link' and zoom <  15) or
        (kind_detail == 'secondary_link' and zoom <  15) or
        (kind_detail == 'tertiary_link' and zoom <  15) or
        (kind == 'minor_road' and zoom < 15) or
        (kind == 'aeroway' and zoom < 14) or
        (kind == 'path' and zoom < 14) or
        (kind == 'rail' and zoom < 15) or
        (kind == 'ferry' and zoom < 15)

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - service
        - surface
        - cycleway
        - cycleway_right
        - cycleway_left
        - hgv
        - operator
      where: >-
        (kind == 'highway' and zoom <  12) or
        (kind == 'major_road' and zoom <  13) or
        (kind == 'minor_road' and zoom < 15) or
        (kind == 'path' and zoom < 14) or
        (kind == 'ferry' and zoom < 15) or
        (kind == 'rail' and zoom < 15)

  # drop these "detail" tags to get better merging at zoom < 16
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 16
      properties:
        - colour
        - operator
        - route
        - route_name
        - state
        - symbol
        - type
      where: >-
        kind == 'minor_road'
  # reduce precision of surface tags at roughly the same zoom as we drop the
  # name (i.e: when we no longer want to uniquely identify the road). this gives
  # us more opportunities to merge features with other features having the same
  # set of properties, which can result in much fewer distinct features and
  # therefore smaller tiles.
  - fn: vectordatasource.transform.whitelist
    params:
      layer: roads
      start_zoom: 0
      end_zoom: 15
      property: surface
      where: >-
        (kind == 'minor_road') or
        (kind in ('major_road', 'highway') and zoom < 11) or
        (kind == 'path' and zoom < 12)
      # map down to these three values (plus implicit missing / None value)
      whitelist:
        - paved
        - compacted
        - unpaved
      remap:
        # paved
        asphalt: paved
        metal: paved
        metal_grid: paved
        tartan: paved
        wood: paved

        # compacted
        concrete: compacted
        paving_stones: compacted
        sett: compacted

        # unpaved
        artificial_turf: unpaved
        clay: unpaved
        cobblestone: unpaved
        cobblestone_flattened: unpaved
        concrete_lanes: unpaved
        concrete_plates: unpaved
        decoturf: unpaved
        dirt: unpaved
        earth: unpaved
        fine_gravel: unpaved
        grass: unpaved
        grass_paver: unpaved
        gravel: unpaved
        ground: unpaved
        mud: unpaved
        pebblestone: unpaved
        salt: unpaved
        sand: unpaved
        woodchips: unpaved

 # drop these "detail" tags to get better merging at zoom < 14
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 14
      properties:
        - surface
      where: >-
        kind == 'minor_road' or
        (kind == 'aeroway' and zoom < 12) or
        (kind == 'path' and zoom < 13)

  # drop to get better merging at mid zooms.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 14
      properties:
        - cutting
        - embankment

  # whitelist certain values for access on roads at mid and low zooms. the
  # distinction between different values is too much detail at these zooms and
  # we'd be better served by more merging.
  - fn: vectordatasource.transform.whitelist
    params:
      layer: roads
      start_zoom: 0
      end_zoom: 14
      property: access
      # this whitelists the most important values, which are most meaningful in
      # terms of interpreting the map at z<14 (private is the most common access
      # value, accounting for 70% of uses on 2018-11-20).
      whitelist:
        - "no"
        - private
        - official
      # some values are less important, but belong to a category that might
      # still be important. for example, access=military at mid or low zooms
      # might effectively be described as "there's a road here, but you probably
      # don't want to go there", while still not being quite the same thing as
      # access=private or access=no, which are both "you definitely don't want
      # to go there".
      remap:
        emergency: official
        military: official
        restricted: official
        forestry: official
  # keep motor_vehicle = no, private, but drop other values. motor_vehicle seems
  # to have a range of values similarly to access. perhaps they should be
  # merged?
  - fn: vectordatasource.transform.whitelist
    params:
      layer: roads
      start_zoom: 0
      end_zoom: 14
      property: motor_vehicle
      whitelist:
        - "no"
        - private

  # this is a patch because we still want to drop name, network from major_road
  # features between zoom 7 and 11
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 7
      end_zoom: 12
      # short-hand for "name" property in the list below means all name-like
      # properties.
      all_name_variants: true
      properties:
        - name
        - all_networks
        - all_shield_texts
      where: >-
        kind == 'major_road'
  # this is a patch to get rid of name, but keep ref & network, for highways
  # when zoom < 12.
  - fn: vectordatasource.transform.drop_names
    params:
      source_layer: roads
      start_zoom: 7
      end_zoom: 12
      where: >-
        kind == 'highway'
  # drop name, ref and the multi-shield properties, but keep single-shield
  # properties, when z<=6 (i.e: NE data)
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 7
      # short-hand for "name" property in the list below means all name-like
      # properties.
      all_name_variants: true
      properties:
        - name
        - ref
        - all_networks
        - all_shield_texts
        - walking_network
        - walking_shield_text
        - walking_shield_text_length
        - bicycle_network
        - bicycle_shield_text
        - bicycle_shield_text_length
      where: >-
        kind == 'highway'
  # drop non-road shield stuff a good deal earlier.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 12
      properties:
        - all_walking_networks
        - all_walking_shield_texts
        - bus_network
        - bus_shield_text
        - bus_shield_text_length
        - all_bus_networks
        - all_bus_shield_texts
      where: >-
        kind == 'highway'
  # get rid of all_* properties on highways when zoom < 10.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 10
      properties:
        - all_networks
        - all_shield_texts
      where: >-
        kind == 'highway'
  # want to further drop all_* stuff on major roads at zoom < 12.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 12
      properties:
        - all_networks
        - all_shield_texts
      where: >-
        kind == 'major_road'
  # drop all_networks & all_shield_texts properties on road things where
  # zoom < 14 and kind isn't highway or major_road, which we've already done
  # above.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 14
      properties:
        - all_networks
        - all_shield_texts
      where: >-
        kind not in ('highway', 'major_road')
  # drop walking network related properties on all roads early
  # as paths are only brought in at zoom 9 and these properties
  # on other kinds would prevent merging at zoom 8 and earlier
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 9
      properties:
        - walking_network
        - walking_shield_text
        - walking_shield_text_length
  # drop RCN network & shield text below zoom 13, and shield text at one more
  # zoom.
  # https://github.com/tilezen/vector-datasource/pull/1707#discussion_r236522771
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 13
      properties:
        - bicycle_network
        - bicycle_shield_text
        - bicycle_shield_text_length
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 14
      properties:
        - bicycle_shield_text
        - bicycle_shield_text_length
  # drop LCN network & shield text below zoom 14 and shield text only at
  # one more zoom level. (should be present at zoom 15).
  # https://github.com/tilezen/vector-datasource/pull/1707#discussion_r236523895
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - bicycle_network
        - bicycle_shield_text
        - bicycle_shield_text_length
      where: >-
        bicycle_network == 'lcn'
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 15
      properties:
        - bicycle_shield_text
        - bicycle_shield_text_length
      where: >-
        bicycle_network == 'lcn'
  # drop any bicycle network & shield text on tracks below zoom 13.
  # https://github.com/tilezen/vector-datasource/pull/1707#discussion_r236524127
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 0
      end_zoom: 13
      properties:
        - bicycle_network
        - bicycle_shield_text
        - bicycle_shield_text_length
      where: >-
        kind == 'path' and kind_detail == 'track'
  - fn: vectordatasource.transform.update_parenthetical_properties
    params:
      source_layer: pois
      values: ['closed', 'historical']
      target_min_zoom: 17
      drop_below_zoom: 16
  - fn: vectordatasource.transform.update_parenthetical_properties
    params:
      source_layer: buildings
      values: ['closed', 'historical']
      target_min_zoom: 17
      drop_below_zoom: 16
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: transit
      start_zoom: 0
      end_zoom: 16
  # only keep all stations below z12, then cut it down to the top few.
  - fn: vectordatasource.transform.keep_n_features
    params:
      source_layer: transit
      start_zoom: 9
      end_zoom: 12
      items_matching: { kind: station }
      max_items: 20
  - fn: vectordatasource.transform.keep_n_features
    params:
      source_layer: transit
      start_zoom: 12
      end_zoom: 14
      items_matching: { kind: station }
      max_items: 30
  - fn: vectordatasource.transform.keep_n_features
    params:
      source_layer: pois
      start_zoom: 9
      end_zoom: 16
      items_matching: { kind: [peak, volcano] }
      max_items: 5
  - fn: vectordatasource.transform.keep_n_features
    params:
      source_layer: water
      start_zoom: 8
      end_zoom: 12
      items_matching:
        kind: [bay, strait, fjord]
        label_placement: True
      max_items: 10

  - fn: vectordatasource.transform.drop_properties_with_prefix
    params: {prefix: mz_}

  # drop small inners in buildings before we do the merge.
  - fn: vectordatasource.transform.drop_small_inners
    params:
      end_zoom: 16
      source_layers: [buildings]
      pixel_area: 10.0

  - fn: vectordatasource.transform.quantize_height
    params:
      source_layer: buildings
      start_zoom: 13
      end_zoom: 16
      quantize:
        13: vectordatasource.transform.quantize_height_round_nearest_20_meters
        14: vectordatasource.transform.quantize_height_round_nearest_10_meters
        15: vectordatasource.transform.quantize_height_round_nearest_10_meters

  # assign `scale_rank` - BEFORE merging, as we want to assign this based on
  # the original area/height/volume of the building before it is possibly
  # merged with others. clients might use scale_rank for filtering, in which
  # case they want to see the original value.
  - fn: vectordatasource.transform.csv_match_properties
    resources:
      matcher:
        type: file
        init_fn: vectordatasource.transform.CSVMatcher
        path: spreadsheets/scale_rank/buildings.csv
    params:
      source_layer: buildings
      target_value_type: int

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: buildings
      start_zoom: 0
      end_zoom: 16
      properties:
        - landuse_kind
      where: >-
        landuse_kind not in ['aerodrome', 'airfield', 'cemetery', 'college', 'conservation', 'forest', 'garden', 'golf_course', 'hospital', 'national_park', 'nature_reserve', 'park', 'protected_area', 'retail', 'runway', 'school', 'station', 'taxiway', 'university']

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: buildings
      start_zoom: 0
      end_zoom: 16
      properties:
        - kind_detail
      where: >-
        kind_detail not in ['airport', 'civic', 'church', 'college', 'commercial', 'fire_station', 'industrial', 'military', 'hospital', 'office', 'public', 'prison', 'retail', 'school', 'sports_centre', 'stadium', 'station', 'synagogue', 'train_station', 'university', 'warehouse']

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: buildings
      start_zoom: 0
      end_zoom: 16
      properties:
        - building_material
        - osm_relation
        - roof_color
        - roof_height
        - roof_material
        - roof_orientation
        - roof_shape
        - root_id
        - volume

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: buildings
      start_zoom: 0
      end_zoom: 16
      # short-hand for "name" property in the list below means all name-like
      # properties.
      all_name_variants: true
      properties:
        - name
        - old_name
        - addr_housenumber
        - addr_street

  # fit min zoom onto the scale rank, as we'll be using the scale rank rather
  # than the min zoom to calculate whether a building should make it into a
  # tile. having them split separately means we can't merge them together.
  #
  # note: this only _increases_ the min_zoom to be inline with the min that
  # matches the scale_rank, it will never _decrease_ the min_zoom. i.e: it will
  # push a z14 building with scale_rank=5 down to z15, but won't lift a z17
  # building up, no matter what its scale_rank.
  - fn: vectordatasource.transform.clamp_min_zoom
    params:
      layer: buildings
      start_zoom: 14
      property: scale_rank
      clamp:
        5: 15
        4: 14
        3: 14

  - fn: vectordatasource.transform.merge_building_features
    params:
      source_layer: buildings
      start_zoom: 13
      end_zoom: 16
      # todo: keep instead of drop?
      drop:
        - name
        - short_name
        - addr_housenumber
        - addr_street
        - osm_relation
      # NOTE: max_merged_features is set to keep the time taken for geometry
      # merging down, as it seems to go up with the square of the number of
      # features.
      max_merged_features: 2000

  # drop small inners in buildings after we do the merge, too! because the merge
  # process may also have created small inners.
  - fn: vectordatasource.transform.drop_small_inners
    params:
      end_zoom: 16
      source_layers: [buildings]
      pixel_area: 10.0

  - fn: vectordatasource.transform.numeric_min_filter
    params:
      source_layer: buildings
      mode: any
      filters:
        13: { area: 5000, height: 150, volume: 150000 }
        14: { area: 3000, height: 100, volume: 100000 }
        15: { area:  500, height: 100, volume: 100000 }

  # drop features not matching scale rank requirements (is is a max, so couldn't
  # be merged with the preceding numeric min).
  - fn: vectordatasource.transform.drop_features_where
    params:
      source_layer: buildings
      start_zoom: 13
      end_zoom: 14
      where: scale_rank > 2

  - fn: vectordatasource.transform.drop_features_where
    params:
      source_layer: buildings
      start_zoom: 14
      end_zoom: 15
      where: scale_rank > 4

  - fn: vectordatasource.transform.drop_small_inners
    params:
      end_zoom: 14
      source_layers: [water]
      pixel_area: 0.1

  # merge aerodrome kind_detail onto runway lines
  - fn: vectordatasource.transform.overlap
    params:
      base_layer: roads
      cutting_layer: landuse
      attribute: kind_detail
      target_attribute: aerodrome_kind_detail
      linear: true
      base_where: >-
        kind == 'aeroway' and kind_detail == 'runway'
      cutting_where: >-
        kind == 'aerodrome' and kind_detail is not None

  # merge aerodrome kind_detail onto runway polygons
  - fn: vectordatasource.transform.overlap
    params:
      base_layer: landuse
      cutting_layer: landuse
      attribute: kind_detail
      target_attribute: kind_detail
      linear: true
      base_where: >-
        kind == 'runway'
      cutting_where: >-
        kind == 'aerodrome' and kind_detail is not None

  # drop this layer before simplify_and_clip - we don't want it in the output,
  # so don't waste time simplifying and clipping it to the tile.
  - fn: vectordatasource.transform.drop_layer
    params:
      layer: admin_areas
      start_zoom: 0

  - fn: vectordatasource.transform.simplify_and_clip
    params: {simplify_before: 16}

  - fn: vectordatasource.transform.intercut
    params:
      base_layer: roads
      cutting_layer: landuse
      attribute: kind
      target_attribute: landuse_kind
      cutting_attrs: { sort_key: 'sort_rank', reverse: True }

  # drop landuse_kind=residential or industrial at mid-low zooms, because they
  # interfere a lot with merging, and tend to be not strongly styled unlike
  # military, hospital or park/forest land uses.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 8
      end_zoom: 14
      properties:
        - landuse_kind
      where: >-
        landuse_kind in ('residential', 'industrial')

  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: roads
      start_zoom: 8
      end_zoom: 14
      properties:
        - landuse_kind
      where: >-
        (kind_detail == 'trunk' and zoom < 11) or
        (kind_detail == 'primary' and zoom < 12) or
        (kind_detail == 'secondary' and zoom < 13) or
        (kind_detail == 'tertiary' and zoom < 13) or
        (kind_detail == 'motorway_link' and zoom < 14) or
        (kind_detail == 'trunk_link' and zoom < 14) or
        (kind_detail == 'primary_link' and zoom < 15) or
        (kind_detail == 'secondary_link' and zoom < 15) or
        (kind_detail == 'tertiary_link' and zoom < 15) or
        (kind == 'minor_road' and zoom < 15) or
        (kind == 'aeroway' and zoom < 13) or
        (kind == 'path' and zoom < 14) or
        (kind == 'ferry' and zoom < 14) or
        (kind == 'rail' and zoom < 14)

  # drop osm_relation tag, used to indicate that shapes came from OSM relations.
  # however, it interferes with merging.
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: landuse
      start_zoom: 4
      end_zoom: 15
      properties:
        - osm_relation

  # drop names on landuse areas at mid and low zooms. it interferes with
  # merging, and anything that we would have labelled would have become a
  # label by now anyway (see handle_label_placement around line 716-ish).
  - fn: vectordatasource.transform.drop_names
    params:
      source_layer: landuse
      start_zoom: 4
      end_zoom: 13

  # drop properties on landuse areas at mid and low zooms. it blocks merging
  - fn: vectordatasource.transform.drop_properties
    params:
      source_layer: landuse
      start_zoom: 4
      end_zoom: 14
      properties:
        - id
        - kind_detail
        - tier
        - passenger_count
        - natural
        - operator
        - sport
        - religion
        - surface
        - attraction
        - zoo
        - barrier
        - fence_type

  # drop small inners before merge, as not having to consider these can speed up
  # the buffer & clipping algorithms.
  - fn: vectordatasource.transform.drop_small_inners
    params:
      end_zoom: 15
      source_layers: [landuse]
      pixel_area: 0.8

  # merge at mid and low zooms, buffering to try and eliminate small gaps
  # between adjacent polygons.
  - fn: vectordatasource.transform.merge_polygon_features
    params:
      source_layer: landuse
      start_zoom: 4
      end_zoom: 13
      merge_min_zooms: true
      buffer_merge: true
      # this formula seems to give a good balance between larger values, which
      # merge more but can merge everything into a blob if too large, and small
      # values which retain detail.
      buffer_merge_tolerance: >-
        min(150, 0.6 * tolerance_for_zoom)

  # merge at high-ish zooms without buffering - but we still want to merge
  # multiple small polygons together to get file size savings.
  - fn: vectordatasource.transform.merge_polygon_features
    params:
      source_layer: landuse
      start_zoom: 13
      end_zoom: 15
      merge_min_zooms: true

  # drop small inners after merge, as small inners could have been introduced
  # by the merge algorithm.
  - fn: vectordatasource.transform.drop_small_inners
    params:
      end_zoom: 15
      source_layers: [landuse]
      pixel_area: 0.8

  # first, merge linestrings together where the properties are the same, and
  # make sure we merge across junctions. this will create a set of non-simple
  # multilinestrings which do not have nodes at junctions.
  #
  # note that the linestrings are already simplified by preceding simplify
  # and clip stage. we don't want to simplify too much more at this stage, as
  # that could lead to odd-looking double-simplified stuff.
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: roads
      start_zoom: 8
      end_zoom: 15
      # setting the following will try to merge linestrings across junctions
      # (i.e: more than 2 roads meeting at a point) where the angle between
      # roads at that point is less than 5 degrees.
      merge_junctions: true
      merge_junction_angle: 5.0
      # setting the following will cause lines, or parts of multi-lines,
      # shorter than 1px at nominal zoom to be dropped.
      drop_short_segments: true
      drop_length_pixels: 1.0
      # integrated simplification step tolerance. NOTE: simplification is only
      # performed if junction merging is set to true! the idea is to simplify
      # away points at junctions where the road is straight, so it shouldn't
      # need to be a large tolerance.
      simplify_tolerance: 1.0

  # drop labels on roads which are too short to render.
  - fn: vectordatasource.transform.drop_names_on_short_boundaries
    params:
      source_layer: roads
      start_zoom: 8
      end_zoom: 15
      # pixels (256px nominal) to require per letter in the name. if lines are shorter than this,
      # the name gets dropped. name pairs (e.g: :left and :right) get dropped if either are longer
      # than pixels_per_letter. larger values mean fewer lines are eligible for labelling.
      pixels_per_letter: 11

  # since we drop names in the previous step, we would like merge it again
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: roads
      start_zoom: 8
      end_zoom: 15
      # setting the following will try to merge linestrings across junctions
      # (i.e: more than 2 roads meeting at a point) where the angle between
      # roads at that point is less than 5 degrees.
      merge_junctions: true
      merge_junction_angle: 5.0
      # setting the following will cause lines, or parts of multi-lines,
      # shorter than 0.1px at nominal zoom to be dropped.
      drop_short_segments: true
      drop_length_pixels: 0.1
      # integrated simplification step tolerance. NOTE: simplification is only
      # performed if junction merging is set to true! the idea is to simplify
      # away points at junctions where the road is straight, so it shouldn't
      # need to be a large tolerance.
      simplify_tolerance: 1.0

  # we do want to merge at 15, but we don't want to merge junctions becase that
  # might merge across oneway information, which doesn't get dropped until
  # zoom < 15.
  - fn: vectordatasource.transform.merge_line_features
    params:
      source_layer: roads
      start_zoom: 15
      end_zoom: 16
      # setting the following will cause lines, or parts of multi-lines,
      # shorter than 1px at nominal zoom to be dropped.
      drop_short_segments: true
      drop_length_pixels: 1.0

  # NOTE: want to do this _before_ buildings_unify, as after that we might not
  # have a feature ID to match buildings on!
  - fn: vectordatasource.transform.backfill_from_other_layer
    params:
      layer: buildings
      layer_key: kind_detail
      other_layer: pois
      other_key: kind

  - fn: vectordatasource.transform.buildings_unify
    params:
      source_layer: buildings
      start_zoom: 15

  - fn: vectordatasource.transform.palettize_colours
    params:
      layer: transit
      attribute: colour_name
      colours:
        aqua: [0, 255, 255]
        aquamarine: [127, 255, 212]
        black: [0, 0, 0]
        blue: [0, 0, 255]
        brown: [165, 42, 42]
        crimson: [220, 20, 60]
        darkgrey: [64, 64, 64]
        darkorchid: [153, 50, 204]
        darkred: [139, 0, 0]
        darkseagreen: [143, 188, 143]
        dodgerblue: [30, 144, 255]
        fuchsia: [255, 0, 255]
        gainsboro: [220, 220, 220]
        gold: [255, 215, 0]
        goldenrod: [218, 165, 32]
        green: [0, 128, 0]
        grey: [128, 128, 128]
        hotpink: [255, 105, 180]
        indigo: [75, 0, 130]
        khaki: [240, 230, 140]
        lightblue: [173, 216, 230]
        lightcoral: [240, 128, 128]
        lightgreen: [144, 238, 144]
        lightteal: [0, 153, 170]
        lime: [0, 255, 0]
        limegreen: [50, 205, 50]
        mediumpurple: [147, 112, 219]
        mediumseagreen: [60, 179, 113]
        mediumturquoise: [72, 209, 204]
        navy: [0, 0, 128]
        olivedrab: [107, 142, 35]
        orange: [255, 165, 0]
        orangered: [255, 69, 0]
        peru: [205, 133, 63]
        pink: [255, 192, 203]
        plum: [221, 160, 221]
        purple: [128, 0, 128]
        red: [255, 0, 0]
        royalblue: [65, 105, 225]
        sandybrown: [244, 164, 96]
        silver: [192, 192, 192]
        steelblue: [70, 130, 180]
        tan: [210, 180, 140]
        teal: [0, 128, 128]
        tomato: [255, 99, 71]
        violet: [238, 130, 238]
        white: [255, 255, 255]
        yellow: [255, 255, 0]
        yellowgreen: [154, 205, 50]

  - fn: vectordatasource.transform.max_zoom_filter
    params:
      layers: [places]

  # collision rank
  - fn: vectordatasource.transform.add_collision_rank
    params:
      where: >-
        layer_name == 'pois' or
        _has_name or
        ref is not None or
        shield_text is not None or
        bicycle_shield_text is not None or
        bus_shield_text is not None or
        walking_shield_text is not None
    resources:
      ranker:
        type: file
        init_fn: vectordatasource.transform.load_collision_ranker
        path: spreadsheets/collision_rank.yaml
