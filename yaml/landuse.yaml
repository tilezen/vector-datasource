#
# NOTE: these globals are shared between the POIs and landuse. if you make an
# update here, please remember to also change it there.
#
global:
  - &output_properties
    name: {col: name}
    protect_class: {col: protect_class}
    operator: {col: operator}
    area:
      call:
        func: util.safe_int
        args: [ { col: area } ]
    source: {col: source}
    mz_label_placement: {col: mz_label_placement}
    sport: {col: sport}
    religion: {col: religion}
    surface: {col: surface}
    natural: {col: natural}
    attraction: {col: attraction}
    zoo: {col: zoo}
    barrier: {col: barrier}
    fence_type: {col: fence_type}
    min_zoom:
      case:
        - when: { meta.source: ne }
          then: 4
        - else: { col: min_zoom }
    mz_is_building:
      call:
        func: util.is_building
        args:
          - {col: building}
          - {col: "building:part"}

  - &tier1_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 3, 300000000 ]
        - [ 4, 300000000 ]
        - [ 5, 150000000 ]
        - [ 6, 150000000 ]
        - [ 7, 100000000 ]
        - [ 8,  10000000 ]
        - [ 9,   5000000 ]
        - [ 10,  1000000 ]
        - [ 11,   500000 ]
        - [ 12,   200000 ]
        - [ 13,   100000 ]
        - [ 14,    50000 ]
        - [ 15,    10000 ]
      default: 16
  - &tier2_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 4, 1000000000 ]
        - [ 5, 1000000000 ]
        - [ 6,  150000000 ]
        - [ 7,  100000000 ]
        - [ 8,   10000000 ]
        - [ 9,    5000000 ]
        - [ 10,   1000000 ]
        - [ 11,    500000 ]
        - [ 12,    150000 ]
        - [ 13,     50000 ]
        - [ 14,     20000 ]
        - [ 15,      2000 ]
      default: 16
  - &tier3_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 8, 10000000 ]
        - [ 9,  5000000 ]
        - [ 10, 1000000 ]
        - [ 11,  500000 ]
        - [ 12,  200000 ]
        - [ 13,  100000 ]
        - [ 14,   50000 ]
        - [ 15,    2000 ]
      default: 16
  - &tier4_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 10, 1000000 ]
        - [ 11,  500000 ]
        - [ 12,  200000 ]
        - [ 13,  100000 ]
        - [ 14,   50000 ]
        - [ 15,    2000 ]
      default: 16
  - &tier5_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 10, 1000000 ]
        - [ 11,  400000 ]
        - [ 12,  200000 ]
        - [ 13,   50000 ]
        - [ 14,   20000 ]
        - [ 15,    2000 ]
      default: 16
  - &tier6_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 12, 500000 ]
        - [ 13, 100000 ]
        - [ 14,  50000 ]
        - [ 15,   5000 ]
      default: 16
  - &small_parks_min_zoom
    lookup:
      key: { col: way_area }
      op: '>='
      table:
        - [ 8,   400000000 ]
        - [ 9,    40000000 ]
        - [ 10,   10000000 ]
        - [ 11,    4000000 ]
        - [ 12,    2000000 ]
        - [ 13,     200000 ]
        - [ 14,     100000 ]
        - [ 15,      10000 ]
      default: 16
  - &us_forest_service
        - United States Forest Service
        - US Forest Service
        - U.S. Forest Service
        - USDA Forest Service
        - United States Department of Agriculture
        - US National Forest Service
        - United State Forest Service
        - U.S. National Forest Service
  - &us_parks_service
        - United States National Park Service
        - National Park Service
        - US National Park Service
        - U.S. National Park Service
        - US National Park service
  - &not_national_park_protection_title
        - Conservation Area
        - Conservation Park
        - Environmental use
        - Forest Reserve
        - National Forest
        - National Wildlife Refuge
        - Nature Refuge
        - Nature Reserve
        - Protected Site
        - Provincial Park
        - Public Access Land
        - Regional Reserve
        - Resources Reserve
        - State Forest
        - State Game Land
        - State Park
        - Watershed Recreation Unit
        - Wild Forest
        - Wilderness Area
        - Wilderness Study Area
        - Wildlife Management
        - Wildlife Management Area
        - Wildlife Sanctuary
  # whitelist for leaf_type
  - &leaftype_kind_detail
    kind_detail:
      case:
        - when: {leaf_type: [broadleaved, leafless, mixed, needleleaved]}
          then: {col: leaf_type}
  # whitelist of religions to use in kind_detail (do not use for plain
  # religion tag)
  - &religion_kind_detail
    kind_detail:
      case:
        - when:
            religion:
              - animist
              - bahai
              - buddhist
              - caodaism
              - catholic
              - christian
              - confucian
              - hindu
              - jain
              - jewish
              - multifaith
              - muslim
              - pagan
              - pastafarian
              - scientologist
              - shinto
              - sikh
              - spiritualist
              - taoist
              - tenrikyo
              - unitarian_universalist
              - voodoo
              - yazidi
              - zoroastrian
          then: {col: religion}

filters:
  - filter: {meta.source: ne}
    min_zoom: 4
    output:
      <<: *output_properties
      kind: urban_area
  ############################################################
  # NOT IN ANY TIER
  #
  # note that these come first, as they are more specific tags
  # and should override more generic tags below, but these
  # aren't in any tier.
  ############################################################
  - filter: {zoo: enclosure}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: enclosure
  - filter: {zoo: petting_zoo}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: petting_zoo
  - filter: {zoo: aviary}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: aviary
  - filter: {attraction: animal}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: animal
  - filter: {attraction: water_slide}
    min_zoom: { clamp: { max: 16, min: 15, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: water_slide
  - filter: {attraction: roller_coaster}
    min_zoom: { clamp: { max: 16, min: 15, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: roller_coaster
  - filter: {attraction: summer_toboggan}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: summer_toboggan
  - filter: {attraction: carousel}
    min_zoom: { clamp: { max: 16, min: 15, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: carousel
  - filter: {attraction: amusement_ride}
    min_zoom: { clamp: { max: 16, min: 15, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: amusement_ride
  - filter: {historic: fort}
    min_zoom: { clamp: { max: 16, min: 11, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: fort

  ############################################################
  # TIER 2 OVERRIDES
  #
  # These are things which are "more specific" than things in
  # tier 1, so they should match first.
  ############################################################
  - filter:
      boundary: national_park
      operator: *us_forest_service
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      any:
        leisure: park
        landuse: park
      park:type: state_recreational_area
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: park
      tier: 2
  - filter:
      boundary: national_park
      protect_class: '6'
      protection_title: National Forest
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      boundary: national_park
      protect_class: '6'
      protection_title: National Forest
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: forest
      tier: 2
  - filter:
      boundary: national_park
      any:
        - protect_class: '6'
        - designation: area_of_outstanding_natural_beauty
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: park
      tier: 2
  - filter:
      any:
        - boundary:type: protected_area
        - boundary: protected_area
      leisure: nature_reserve
      protect_class: ['4', '5']
      not:
        - operator: *us_forest_service
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: nature_reserve
      tier: 2

  ############################################################
  # TIER 6 OVERRIDES
  #
  # These are things which are "more specific" than things in
  # tier 1, so they should match first.
  ############################################################
  # common
  - filter:
      boundary:type: protected_area
      leisure: common
      protect_class: '5'
      not:
        any:
          - operator: *us_forest_service
          - operator: *us_parks_service
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: common
      tier: 6

  ############################################################
  # TIER 1
  ############################################################
  - filter:
      historic: battlefield
      not: {operator: *us_forest_service}
    min_zoom: *tier1_min_zoom
    output:
      <<: *output_properties
      kind: battlefield
      tier: 1
  - filter:
      boundary: national_park
      not:
        any:
          - operator: *us_forest_service
          - protection_title: *not_national_park_protection_title
      any:
        protect_class: ['2', '3']
        operator: *us_parks_service
        operator:en: Parks Canada
        designation: national_park
        protection_title: National Park
    min_zoom: *tier1_min_zoom
    output:
      <<: *output_properties
      kind: national_park
      tier: 1

  ############################################################
  # TIER 2
  ############################################################
  - filter:
      boundary: national_park
      not:
        any:
          - operator: *us_forest_service
          - protection_title: *not_national_park_protection_title
      any:
        protect_class: ['2', '3']
        protect_title:
          - National Park
          - National Monument
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: national_park
      tier: 2

  ############################################################
  # mid-tier 2 overrides
  #
  # the boundary=national_park appears to get used for a ton of
  # stuff that isn't actually a national park, so we match a
  # few things in advance which seem to be more specific.
  ############################################################
  - filter: {natural: wetland}
    min_zoom: { max: [ 9, *tier2_min_zoom ] }
    output:
      <<: *output_properties
      kind: wetland
      kind_detail:
        case:
          - when: { wetland: [bog, fen, mangrove, marsh, mud, reedbed, saltern, saltmarsh, string_bog, swamp, tidalflat, wet_meadow] }
            then: {col: wetland}

  ############################################################
  # TIER 2 (continued...)
  ############################################################
  - filter:
      any:
        leisure: park
        landuse: park
        boundary: national_park
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: park
      tier: 2

  # forests
  - filter:
      landuse: forest
      protect_class: '6'
    min_zoom: { max: [ 6, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: forest
      tier: 2
  - filter:
      landuse: forest
      operator: *us_forest_service
    min_zoom: { max: [ 6, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: forest
      tier: 2
  - filter: { landuse: forest }
    min_zoom: { max: [ 9, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: forest
      tier: 2

  # nature reserves
  - filter: {leisure: nature_reserve}
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: nature_reserve
      tier: 2
  # Bureau of Land Management protected areas
  - filter:
      boundary: protected_area
      operator:
        - BLM
        - US Bureau of Land Management
    min_zoom: { max: [ 9, *small_parks_min_zoom ] }
    output:
      <<: *output_properties
      kind: protected_area
      tier: 2
  # scientific protected areas?
  - filter:
      boundary: protected_area
      protect_class: ['1', '1a', '1b']
    min_zoom: { max: [ 9, *small_parks_min_zoom ] }
    output:
      <<: *output_properties
      kind: protected_area
      tier: 2
  # protected areas
  - filter: {boundary: protected_area}
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: protected_area
      tier: 2

  # woods
  - filter:
      landuse: wood
      operator: *us_forest_service
    min_zoom: { max: [ 6, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: wood
      tier: 2
  - filter: { landuse: wood }
    min_zoom: { max: [ 10, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: wood
      tier: 2

  - filter: { natural: forest, operator: *us_forest_service }
    min_zoom: { max: [ 6, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: natural_forest
      tier: 2
  - filter: { natural: forest }
    min_zoom: { max: [ 10, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: natural_forest
      tier: 2

  - filter: { natural: wood }
    min_zoom: { max: [ 9, *tier2_min_zoom ] }
    output:
      <<: [*output_properties, *leaftype_kind_detail]
      kind: natural_wood
      tier: 2

  - filter: {landuse: urban}
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: urban
      tier: 2
  - filter: {landuse: rural}
    min_zoom: *tier2_min_zoom
    output:
      <<: *output_properties
      kind: rural
      tier: 2
  - filter: {landuse: residential}
    min_zoom: { max: [ 10, *tier2_min_zoom ] }
    output:
      <<: *output_properties
      kind: residential
      tier: 2

  - filter: { landuse: farm }
    min_zoom: { max: [ 9, *tier2_min_zoom ] }
    output:
      <<: *output_properties
      kind: farm
      tier: 2
  - filter: { landuse: farmland }
    min_zoom: { max: [ 9, *tier2_min_zoom ] }
    output:
      <<: *output_properties
      kind: farmland
      tier: 2

  ############################################################
  # NO TIER
  #
  # these are often co-tagged landuse=military, but are "more
  # specific", so we want them to match first.
  ############################################################
  - filter:
      military: danger_area
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 11, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: danger_area
    extra_columns: [way]
  - filter:
      military: range
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 11, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: range
    extra_columns: [way]

  ############################################################
  # TIER 3
  ############################################################
  - filter:
      any:
        - military: airfield
          # backfill for aerodrome:type=military, we call that "airfield"
        - all:
            aeroway: aerodrome
            "aerodrome:type": military
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: airfield
      kind_detail: military
      tier: 3
  - filter:
      aeroway: aerodrome
      not: { "aerodrome:type": military }
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: aerodrome
      kind_detail:
        case:
          - when: { "international_flights": "yes" }
            then: international
          - when: { "aerodrome": international }
            then: international
          - when: { "aerodrome:type": [public, private, airfield, international, regional, gliding] }
            then: { col: "aerodrome:type" }
          - when: { "aerodrome:type": "military/public" }
            then: military_public
          - when: { "aerodrome": [public, private, airfield, regional, gliding] }
            then: { col: "aerodrome" }
      tier: 3
      passenger_count: {call: {func: util.safe_int, args: [{col: passenger_count}]}}
  - filter: {military: naval_base}
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: naval_base
      tier: 3
  - filter: {landuse: military}
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: military
      tier: 3
  - filter: {amenity: university}
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: university
      tier: 3
  - filter: {amenity: college}
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: college
      tier: 3
  # glacier
  - filter: {natural: glacier}
    min_zoom: *tier3_min_zoom
    output:
      <<: *output_properties
      kind: glacier
      tier: 3

  ############################################################
  # TIER 4
  ############################################################
  # cemetery & grave_yard
  - filter:
      any:
        landuse: cemetery
        amenity: grave_yard
    min_zoom: *tier4_min_zoom
    output:
      <<: [*output_properties, *religion_kind_detail]
      kind:
        case:
          - when: { landuse: cemetery }
            then: cemetery
          - else: grave_yard
      tier: 4
      denomination: { col: denomination }
  # commercial
  - filter: {landuse: commercial}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: commercial
      tier: 4
  # golf_course
  - filter: {leisure: golf_course}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: golf_course
      tier: 4
  # hospital
  - filter: {amenity: hospital}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: hospital
      tier: 4
  # industrial
  - filter: {landuse: industrial}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: industrial
      tier: 4
  # plant
  - filter: {power: plant}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: plant
      tier: 4
  # generator
  - filter: {power: generator}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: generator
      tier: 4
  # substation
  - filter: { power: [substation, station, sub_station] }
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: substation
      tier: 4
  # railway
  - filter: {landuse: railway}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: railway
      tier: 4
  # sports_centre
  - filter: {leisure: sports_centre}
    min_zoom: { max: [ 12, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: sports_centre
      tier: 4
  # recreation_ground
  - filter: {landuse: recreation_ground}
    min_zoom: { max: [ 12, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: recreation_ground
      tier: 4
  # retail
  - filter: {landuse: retail}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: retail
      tier: 4
  # stadium
  - filter: {leisure: stadium}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: stadium
      tier: 4
  # zoo
  - filter: {tourism: zoo}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: zoo
      tier: 4
  # wildlife_park
  - filter: {zoo: wildlife_park}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: wildlife_park
      tier: 4
  # winter_sports
  - filter: {landuse: winter_sports}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: winter_sports
      tier: 4
  # port, ferry, container terminals
  #
  # if these are also water features, then we don't want to output a polygon
  # for this. because we can't alter the geometry type at this stage, we handle
  # this by setting a parameter that indicates we should drop the polygon at a
  # later stage.
  - filter:
      landuse:
        - harbour
        - port
        - port_terminal
        - ferry_terminal
        - container_terminal
    min_zoom: { clamp: { min: 13, max: 16, value: { sum: [ { col: zoom }, 1.81 ] } } }
    output:
      <<: *output_properties
      kind: {col: landuse}
      # mz = metazen :-)
      mz_drop_polygon:
        case:
          - when:
              any:
                - { waterway: true }
                - { natural: [water, bay, strait, fjord, reef] }
                - { landuse: [reservoir, basin] }
            then: true
  # pier with mooring
  - filter:
      man_made: pier
      geom_type: polygon
      mooring: [
        'no', 'yes', commercial, cruise, customers, declaration, ferry, guest,
        private, public, waiting, yacht, yachts]
    min_zoom: { clamp: { min: 11, max: 16, value: { sum: [ { col: zoom }, 1.81 ] } } }
    output:
      <<: *output_properties
      kind: pier
      mooring: {col: mooring}
  # pier without mooring
  - filter:
      man_made: pier
      geom_type: polygon
    min_zoom: { clamp: { min: 11, max: 16, value: { sum: [ { col: zoom }, 1.81 ] } } }
    output:
      <<: *output_properties
      kind: pier
  # wastewater_plant
  - filter: {man_made: wastewater_plant}
    min_zoom: { max: [ 12, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: wastewater_plant
      tier: 4
  # works
  - filter: {man_made: works}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: works
      tier: 4
  # bridge
  - filter: {man_made: bridge}
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: bridge
      tier: 4
  # tower
  - filter: {man_made: tower}
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: tower
      tier: 4
  # breakwater
  - filter:
      man_made: breakwater
      geom_type: polygon
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: breakwater
      tier: 4
  # water_works
  - filter: {man_made: water_works}
    min_zoom: *tier4_min_zoom
    output:
      <<: *output_properties
      kind: water_works
      tier: 4
  # groyne
  - filter:
      man_made: groyne
      geom_type: polygon
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: groyne
      tier: 4
  # dike
  - filter:
      man_made: dike
      geom_type: polygon
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: dike
      tier: 4
  # cutline
  - filter:
      man_made: cutline
      geom_type: polygon
    min_zoom: { max: [ 13, *tier4_min_zoom ] }
    output:
      <<: *output_properties
      kind: cutline
      tier: 4

  ############################################################
  # TIER 5
  ############################################################
  # theme_park (NOTE: also allow and normalise 'Theme Park' to deal with vandalism)
  - filter: {tourism: [theme_park, 'Theme Park']}
    min_zoom: *tier5_min_zoom
    output:
      <<: *output_properties
      kind: theme_park
      tier: 5
  # resort
  - filter: {leisure: resort}
    min_zoom: *tier5_min_zoom
    output:
      <<: *output_properties
      kind: resort
      tier: 5
  # aquarium
  - filter: {tourism: aquarium}
    min_zoom: { max: [ 12, *tier5_min_zoom ] }
    output:
      <<: *output_properties
      kind: aquarium
      tier: 5
  # winery
  - filter: {tourism: winery}
    min_zoom: { max: [ 13, *tier5_min_zoom ] }
    output:
      <<: *output_properties
      kind: winery
      tier: 5
  # maze
  - filter: {attraction: maze}
    min_zoom: *tier5_min_zoom
    output:
      <<: *output_properties
      kind: maze
      tier: 5
  # beach
  - filter: {natural: beach}
    min_zoom: *tier5_min_zoom
    output:
      <<: *output_properties
      kind: beach
      tier: 5
      # whitelist most common surface values for beaches. i'm not quite sure i'd
      # call surface=grass a beach, but it's in the data..?
      kind_detail:
        case:
          - when: {surface: [grass, gravel, pebbles, pebblestone, rocky, sand]}
            then: {col: surface}
  # orchard
  - filter: { landuse: orchard }
    min_zoom: { max: [ 9, *tier2_min_zoom ] }
    output:
      <<: *output_properties
      kind: orchard
      kind_detail:
        case:
          - when:
              trees:
                - agave_plants
                - almond_trees
                - apple_trees
                - avocado_trees
                - banana_plants
                - cherry_trees
                - coconut_palms
                - coffea_plants
                - date_palms
                - hazel_plants
                - hop_plants
                - kiwi_plants
                - macadamia_trees
                - mango_trees
                - oil_palms
                - olive_trees
                - orange_trees
                - papaya_trees
                - peach_trees
                - persimmon_trees
                - pineapple_plants
                - pitaya_plants
                - plum_trees
                - rubber_trees
                - tea_plants
                - walnut_trees
            then: { col: trees }
  # plant nursery
  - filter: { landuse: plant_nursery }
    min_zoom: *tier5_min_zoom
    output:
      <<: *output_properties
      kind: plant_nursery

  ############################################################
  # TIER 6
  ############################################################
  # garden
  - filter: {leisure: garden}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: garden
      tier: 6
  # allotments
  - filter: {landuse: allotments}
    min_zoom: { max: [ 13, *tier6_min_zoom ] }
    output:
      <<: *output_properties
      kind: allotments
      tier: 6
  # pedestrian
  - filter:
      highway: pedestrian
      geom_type: polygon
    min_zoom: { max: [ 13, *tier6_min_zoom ] }
    output:
      <<: *output_properties
      kind: pedestrian
      tier: 6
  # common
  - filter: {leisure: common}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: common
      tier: 6
  # pitch
  - filter: {leisure: pitch}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: pitch
      tier: 6
  # place_of_worship
  - filter: {amenity: place_of_worship}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: place_of_worship
      tier: 6
  # playground
  - filter: {leisure: playground}
    min_zoom: { max: [ 13, *tier6_min_zoom ] }
    output:
      <<: *output_properties
      kind: playground
      tier: 6
  # school
  - filter: {amenity: school}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: school
      tier: 6
  # attraction
  - filter: {tourism: attraction}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: attraction
      tier: 6
  # artwork
  - filter: {tourism: artwork}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: artwork
      tier: 6
  # wilderness_hut
  - filter: {tourism: wilderness_hut}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: wilderness_hut
      tier: 6
  # hanami
  - filter: {tourism: hanami}
    min_zoom: *tier6_min_zoom
    output:
      <<: *output_properties
      kind: hanami
      tier: 6

  ############################################################
  # TIER 6 EXTRA - PARKING
  ############################################################
  - filter: {amenity: parking}
    min_zoom:
      lookup:
        key: { col: way_area }
        op: '>='
        table:
          - [ 14, 50000 ]
          - [ 15,  5000 ]
        default: 16
    output:
      <<: *output_properties
      kind: parking
      tier: 6


  ############################################################
  # NOT IN ANY TIER
  ############################################################
  # park w/ US Parks Service operator
  - filter:
      any:
        leisure: [park, national_park]
        landuse: [park, national_park]
    min_zoom: { clamp: { min: 9, max: 14, value: { sum: [ { col: zoom }, 2 ] } } }
    output:
      <<: *output_properties
      kind: park
  - filter: {landuse: grass}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: grass
  - filter: {landuse: meadow}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: meadow
  - filter: {landuse: village_green}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: village_green
  - filter: {landuse: quarry}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: quarry
  - filter: {natural: land}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: land
  - filter: {natural: scrub}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: scrub
  - filter: {natural: park}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: natural_park
  - filter: {natural: [bare_rock, desert, grassland, heath, sand, shingle]}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: {col: natural}
  - filter: {landuse: vineyard}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: vineyard
  - filter:
      highway: footway
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: footway
  - filter: {amenity: library}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: library
  - filter: {amenity: fuel}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: fuel
  - filter: {amenity: cinema}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: cinema
  - filter: {amenity: theatre}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: theatre
  - filter: {amenity: prison}
    min_zoom: { clamp: { max: 16, min: 11, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: prison
  - filter:
      any:
        - aeroway: runway
        - "area:aeroway": runway
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: runway
  - filter:
      any:
        - aeroway: taxiway
        - "area:aeroway": taxiway
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: taxiway
  - filter:
      any:
        - aeroway: apron
        - "area:aeroway": apron
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: apron
  - filter: {tourism: trail_riding_station}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: trail_riding_station
  - filter: {natural: scree}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: scree
  - filter: {leisure: water_park}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: water_park
  - filter:
      waterway: dam
      geom_type: line
    min_zoom: 12
    output:
      <<: *output_properties
      kind: dam
    extra_columns: [way]
  - filter:
      waterway: weir
      geom_type: line
    min_zoom: 12
    output:
      <<: *output_properties
      kind: weir
    extra_columns: [way]
  - filter:
      waterway: dam
      geom_type: polygon
    min_zoom: { clamp: { max: 16, min: 11, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: dam
    extra_columns: [way]
  - filter: {leisure: dog_park}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: dog_park
  - filter: {leisure: track}
    min_zoom: { clamp: { max: 16, min: 12, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: recreation_track
  - filter: {natural: stone}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: stone
  - filter: {natural: rock}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: rock
  - filter: {natural: mud}
    min_zoom: { clamp: { max: 16, min: 9, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: mud
  - filter: {tourism: caravan_site}
    min_zoom: { clamp: { max: 16, min: 12, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: caravan_site
  - filter: {tourism: picnic_site}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: picnic_site
  - filter: {natural: tree_row}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: tree_row
  - filter: {barrier: hedge}
    min_zoom: { clamp: { max: 16, min: 13, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: hedge
  - filter: {highway: services}
    min_zoom: { clamp: { min: 11, max: 16, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: service_area
  - filter: {highway: rest_area}
    min_zoom: { clamp: { min: 11, max: 16, value: { col: zoom } } }
    output:
      <<: *output_properties
      kind: rest_area
  - filter:
      any:
        barrier: city_wall
        historic: citywalls
    min_zoom: 12
    output:
      <<: *output_properties
      kind: city_wall
  - filter: {man_made: snow_fence}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: snow_fence
  - filter: {barrier: retaining_wall}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: retaining_wall
  - filter: {barrier: wall}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: wall
      kind_detail:
        case:
          - when:
              wall:
                - dry_stone
                - noise_barrier
                - brick
                - stone
                - pise
                - castle_wall
                - seawall
                - jersey_barrier
                - flood_wall
                - concrete
                - gabion
            then: { col: wall }
          - when: {wall: [drystone, stone_wall]}
            then: dry_stone
  - filter: {barrier: [kerb, guard_rail, ditch]}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: {col: barrier}
  - filter: {man_made: [embankment, cutting]}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: { col: man_made }

  # whitelist fence_type if it's present, otherwise don't include it. this
  # means we don't get random values in the output that we can't document.
  - filter:
      barrier: fence
      fence_type: [avalanche, barbed_wire, bars, brick, chain, chain_link, concrete, drystone_wall, electric, grate, hedge, metal, metal_bars, net, pole, railing, railings, split_rail, steel, stone, wall, wire, wood]
    min_zoom: 16
    output:
      <<: *output_properties
      kind: fence
      kind_detail: { col: fence_type }
  - filter:
      barrier: fence
    min_zoom: 16
    output:
      <<: *output_properties
      kind: fence

  - filter: {barrier: wire_fence}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: fence
      kind_detail: wire
  - filter: {power: line}
    min_zoom: 14
    output:
      <<: *output_properties
      kind: power_line
  - filter: {power: minor_line}
    min_zoom: 17
    output:
      <<: *output_properties
      kind: power_minor_line
  - filter: {tourism: camp_site}
    min_zoom: { max: [ 12, *tier5_min_zoom ] }
    output:
      <<: *output_properties
      kind: camp_site
  - filter: {barrier: gate}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: gate
  - filter:
      man_made: crane
      geom_type: line
    min_zoom: 16
    output:
      <<: *output_properties
      kind: crane
      kind_detail:
        case:
          - when:
              "crane:type":
                - portal_crane
                - gantry_crane
                - travel_lift
                - floor-mounted_crane
                - shiploader
                - tower_crane
            then: {col: "crane:type"}
  - filter:
      landuse:
        - shipyard
    min_zoom: 15
    output:
      <<: *output_properties
      kind: {col: landuse}
  - filter: {waterway: boatyard}
    min_zoom: 15
    output:
      <<: *output_properties
      kind: boatyard
  - filter:
      landuse:
        - wharf
        - quay
    min_zoom: 16
    output:
      <<: *output_properties
      kind: {col: landuse}
  - filter: {man_made: quay}
    min_zoom: 16
    output:
      <<: *output_properties
      kind: quay

  # Low Emissions Zones
  - filter:
      any:
        - {boundary: low_emission_zone}
        # NOTE: this seems to be an outdated tag, but still used on 15 objects
        # at the time of writing, including the London "Ultra Low Emission Zone"
        # -- although this won't show up as it hasn't been mapped enough to form
        # a closed polygon yet.
        - {type: LEZ}
    min_zoom: { clamp: { min: 11, max: 16, value: { sum: [ { col: zoom }, 6.5 ] } } }
    output:
      <<: *output_properties
      kind: low_emission_zone
